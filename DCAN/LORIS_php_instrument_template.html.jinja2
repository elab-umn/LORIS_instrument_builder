<?php

class NDB_BVL_Instrument_{{ param.instrument_table_name }} extends NDB_BVL_Instrument
{
    use \LorisFormDictionaryImpl;
    use LegacyInstrumentTrait;
    var $ValidityEnabled = {{ param.validity_enabled }};
    var $ValidityRequired = {{ param.validity_required }};

    /**
     * sets up basic data, such as the HTML_Quickform object, and so on.
     *
     * @param string $commentID the CommentID identifying the data to load
     * @param string $page if a multipage form, the page to show
     * @return void
     * @access public
     */
    function setup(?string $commentID = null, $page = null): void
    {
        $this->formType = "XIN";
        $this->form = new LorisForm('test_form');

        $this->page = $page;            // page label (number or
        // string - used by
        // user-defined child classes)

        // set the object properties
        $this->testName = '{{ param.instrument_table_name }}' ;           // test_names.Test_name
        $this->table = '{{ param.instrument_table_name }}';              // name of database table corresponding to instrument
        // data keyed by commentID
        $this->commentID = $commentID;

        //The array of dates/timestamps to convert to database dates/timestamps
        //Any HTML_Quickform date elements must be listed here
        $this->dateTimeFields = array(
{% if param.include_meta_fields %}              "Date_taken" {% for var in param.date_fields %}, "{{ var }}"{% endfor %}
{% else %}
                {% for var in param.date_fields %}"{{ var }}"{{ "," if not loop.last }}{% endfor %}
{% endif %}

        );

        //The array of selects with multiple answers allowed
        //Any HTML_Quickform multiple selects must be listed here
        $this->_selectMultipleElements = array();

        // Get the subject age in months for scoring

        $db =& Database::singleton();
        // required fields for data entry completion status
{# TODO: update this based on first and last question of each page #}
        $this->_requiredElements = array(
            
        );

        //MODIFY THIS WHEN THE SCORING IS IMPLEMENTED
        // $this->_doubleDataEntryDiffIgnoreColumns = array('CommentID', 'UserID', 'Testdate', 'Window_Difference', 'Candidate_Age', 'Data_entry_completion_status'
        // );

        // setup the form
        $this->_setupForm();

    }

    /**
     * method to build the HTML_Quickform object into a paged form
     *
     * @return void
     * @access private
     */
    function _setupForm()
    {
        if (preg_match("/(_page[0-9]+)/", $this->page, $matches)) {
            call_user_func(array($this, $matches[1]));
        } else {
            $this->_main();
        }

        //Defines the call back function for HTML Quickform to use when validating the form.
        $this->form->addFormRule(array(&$this, 'XINValidate'));
    }

    /**
     * generates the main page of the form.
     *
     * @return void
     * @access private
     *
     */
{# TODO: FOR each page number loop #}
{% for pg in range(1, param.loris_num_pages + 1) %}
    {% if pg == 1 %}
    function _main()
    {
        // display test name
        $this->addHeader("{{ param.instrument_name_text }}");

        {% if param.include_meta_fields %}
        // automatically adds examiner & date of administration
        $this->_addMetadataFields();

        {%  endif %}
    {% elif pg > 1 %}
    function _page{{ pg - 1 }}()
    {
    {% endif %}
    {% for q in var_data %}
    {% if q.page == pg and q.front_end %}
        {% if q.var_type in field_type.text%}
            {% if q.status %}
        $this->addTextElement('{{ q.name }}',"{{ q.text }}");
            {% else %}
        $this->form->addElement('text','{{ q.name }}',"{{ q.text }}");
            {% endif %}
        {% elif q.var_type in field_type.textarea %}
        $this->addTextAreaElement('{{ q.name }}',"{{ q.text }}");
        {% elif q.var_type == 'enum' %}
        $this->form->addElement('select', '{{ q.name }}', "{{ q.text }}", array({{ q.enum_array }}));
        {% elif q.var_type == 'date' %}
        $this->addBasicDate('{{ q.name }}', "{{ q.text }}");
        {% elif q.var_type == 'header' %}
        $this->addHeader("{{ q.text }}");
        {% elif q.var_type == 'static' %}
        $this->form->addElement('static','',"{{ q.text }}");
        {% elif q.var_type == 'br' or q.var_type == 'break' %}
        $this->form->addElement('static','',"<br/>");
        {% elif q.var_type == 'score' %}
        $this->form->addElement('static','{{ q.name }}',"{{ q.text }}");
        {% endif %}
    {% endif %}
    {% endfor %}
    }


{% endfor %}
}

?>